name: Main Workflow
on: [ push, pull_request ]
env:
  LLVM_VERSION: 15
jobs:
  debug:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    container: ghcr.io/opencyphal/toolshed:ts22.4.3
    strategy:
      matrix:
        toolchain: [ 'clang', 'gcc' ]
        include:
          - toolchain: gcc
            c-compiler: gcc
            cxx-compiler: g++
          - toolchain: clang
            c-compiler: clang
            cxx-compiler: clang++
    steps:
      - uses: actions/checkout@v3
      - run: |
          # TODO BEGIN https://github.com/OpenCyphal/docker_toolchains/issues/36
          dpkg --add-architecture i386
          apt-get update
          apt-get install -y libgtest-dev libgtest-dev:i386
      - run: >
          cmake
          -B ${{ github.workspace }}/build
          -DCMAKE_BUILD_TYPE=Debug
          -DCMAKE_C_COMPILER=${{ matrix.c-compiler }}
          -DCMAKE_CXX_COMPILER=${{ matrix.cxx-compiler }}
          tests
      - run: |
          cd ${{ github.workspace }}/build
          make VERBOSE=1 -j$(nproc)
          make test ARGS="--verbose"
      - uses: actions/upload-artifact@v3
        if: always()
        with:
          # The matrix is shown for convenience but this is fragile because the values may not be string-convertible.
          # Shall it break one day, feel free to remove the matrix from here.
          name: ${{github.job}}-#${{strategy.job-index}}-${{job.status}}-${{join(matrix.*, ',')}}
          path: ${{github.workspace}}/**/*
          retention-days: 2

  optimizations:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    container: ghcr.io/opencyphal/toolshed:ts22.4.3
    strategy:
      matrix:
        toolchain: [ 'clang', 'gcc' ]
        build_type: [ Release, MinSizeRel ]
        include:
          - toolchain: gcc
            c-compiler: gcc
            cxx-compiler: g++
            cxx-flags: -fno-strict-aliasing  # GCC in MinSizeRel C++20 mode misoptimizes the Cavl test.
          - toolchain: clang
            c-compiler: clang
            cxx-compiler: clang++
    steps:
      - uses: actions/checkout@v3
      - run: |
          # TODO BEGIN https://github.com/OpenCyphal/docker_toolchains/issues/36
          dpkg --add-architecture i386
          apt-get update
          apt-get install -y libgtest-dev libgtest-dev:i386
      - run: >
          cmake
          -B ${{ github.workspace }}/build
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -DCMAKE_C_COMPILER=${{ matrix.c-compiler }}
          -DCMAKE_CXX_COMPILER=${{ matrix.cxx-compiler }}
          -DCMAKE_CXX_FLAGS="${{ matrix.cxx-flags }}"
          -DNO_STATIC_ANALYSIS=1
          tests
      - run: |
          cd ${{ github.workspace }}/build
          make VERBOSE=1 -j$(nproc)
          make test ARGS="--verbose"
      - uses: actions/upload-artifact@v3
        if: always()
        with:
          # The matrix is shown for convenience but this is fragile because the values may not be string-convertible.
          # Shall it break one day, feel free to remove the matrix from here.
          name: ${{github.job}}-#${{strategy.job-index}}-${{job.status}}-${{join(matrix.*, ',')}}
          path: ${{github.workspace}}/**/*
          retention-days: 2

  avr:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    env:
      mcu: at90can64
      flags: -Wall -Wextra -Werror -pedantic -Wconversion -Wtype-limits
    strategy:
      matrix:
        std: [ 'c99', 'c11', 'gnu99', 'gnu11' ]
    steps:
      - uses: actions/checkout@v3
      - run: |
          sudo apt update -y && sudo apt upgrade -y
          sudo apt install gcc-avr avr-libc
          avr-gcc --version
      - run: avr-gcc libudpard/*.c -c -std=${{matrix.std}} -mmcu=${{env.mcu}} ${{env.flags}}

  arm:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    env:
      flags: -Wall -Wextra -Werror -pedantic -Wconversion -Wtype-limits -Wcast-align -Wfatal-errors
    strategy:
      matrix:
        std: [ 'c99', 'c11', 'gnu99', 'gnu11' ]
    steps:
      - uses: actions/checkout@v3
      - run: |
          sudo apt update -y && sudo apt upgrade -y
          sudo apt-get install -y gcc-arm-none-eabi
      - run: arm-none-eabi-gcc libudpard/*.c -c -std=${{matrix.std}} ${{ env.flags }}

  style_check:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: DoozyX/clang-format-lint-action@v0.15
        with:
          source: './libudpard ./tests'
          extensions: 'c,h,cpp,hpp'
          clangFormatVersion: ${{ env.LLVM_VERSION }}
